@using com.softpine.muvany.clientservices;
@using com.softpine.muvany.component.Components.Generals
@using com.softpine.muvany.component.Forms;
@using com.softpine.muvany.component.States;
@using com.softpine.muvany.component.Tools;
@using com.softpine.muvany.models.DTOS;
@using com.softpine.muvany.models.Requests;

@inject SnackBarComponent SnackBarComponent
@inject NavigationManager NavigationManager
@inject IUserService userService

<MudDialog @bind-IsVisible="DialogVisible">
    <DialogContent>
        <ProgressLineComponent ShowLoading="@StaticValues.IsLoading" />
        <ConfirmActionDialog ShowDialog="@ShowConfirmDialog" OnConfirm="OnSave" OnCancel="Cancel" />
        <MudForm @ref="Form" Model="EditForm" @bind-IsValid="@Success" @bind-Errors="@Errors" Validation="@(Validator.ValidateValue)" ValidationDelay="0">
            <MudTextField @bind-Value="EditForm.Email" Label="Email" For="@(() => EditForm.Email)" Immediate="true" />
            <MudText Typo="Typo.body2">Se enviará un correo a esta dirección, por favor verifica tu bandeja de correos no deseados o spam si no aparece en la bandeja de entrada</MudText>
            <MudButton Variant="Variant.Text" OnClick="@GoToReset">Pulsa aquí si ya tienes tu codigo.</MudButton>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <SaveIconButtonComponent OnClick="ConfirmSave" Disable="StaticValues.IsLoading" />
        <CencelIconButtonComponent OnClick="Cancel" />
    </DialogActions>
</MudDialog>

@code{
    protected override void OnInitialized()
    {
        EditForm = new();
    }

    /// <summary>
    /// Indica visibilidad del diálogo
    /// </summary>
    [Parameter]
    public bool DialogVisible { get; set; }

    /// <summary>
    /// Indica si ya le fue enviada la solicitud al servidor
    /// </summary>
    [Parameter]
    public EventCallback Sent { get; set; }

    ForgotPasswordForm EditForm = new ForgotPasswordForm();
    ForgotPasswordFormValidator Validator = new();

    MudForm Form = new MudForm();

    bool ShowConfirmDialog;
    bool Success;
    string[] Errors = { };


    async Task ConfirmSave()
    {

        await Form.Validate();
        if (!Form.IsValid)
        {
            SnackBarComponent.ShowSnackBarErrorCamposRequeridos();
            return;
        }
        ShowConfirmDialog = true;
        StateHasChanged();
    }

    void GoToReset()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri+"resetpassword");
    }

    
    async Task OnSave()
    {
        StaticValues.IsLoading = true;
        ShowConfirmDialog = false;
        StateHasChanged();
        //invocar endpoing
        await  RequestCode();

        StaticValues.IsLoading = false;
        await Sent.InvokeAsync(true);
    }

    async Task RequestCode()
    {
       var res = await userService.ForgotPassword(EditForm.Email);

        if (res.Code == 200)
        {
            GoToReset();
        }
        else if (res.Code == 500)
        {
            SnackBarComponent.ShowSnackBarError("Error conectando al servidor", res.Exception.messages[0]);
        }
        else
        {
            SnackBarComponent.ShowSnackBarError("Error enviando código", res.Exception.messages[0]);
        }


    }

    async Task Cancel()
    {
        ShowConfirmDialog = false;
        StateHasChanged();
        await Sent.InvokeAsync();
    }
}

